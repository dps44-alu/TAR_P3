// Generated by gencpp from file mi_accion/FibonacciResult.msg
// DO NOT EDIT!


#ifndef MI_ACCION_MESSAGE_FIBONACCIRESULT_H
#define MI_ACCION_MESSAGE_FIBONACCIRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mi_accion
{
template <class ContainerAllocator>
struct FibonacciResult_
{
  typedef FibonacciResult_<ContainerAllocator> Type;

  FibonacciResult_()
    : secuencia_final()  {
    }
  FibonacciResult_(const ContainerAllocator& _alloc)
    : secuencia_final(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _secuencia_final_type;
  _secuencia_final_type secuencia_final;





  typedef boost::shared_ptr< ::mi_accion::FibonacciResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mi_accion::FibonacciResult_<ContainerAllocator> const> ConstPtr;

}; // struct FibonacciResult_

typedef ::mi_accion::FibonacciResult_<std::allocator<void> > FibonacciResult;

typedef boost::shared_ptr< ::mi_accion::FibonacciResult > FibonacciResultPtr;
typedef boost::shared_ptr< ::mi_accion::FibonacciResult const> FibonacciResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mi_accion::FibonacciResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mi_accion::FibonacciResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mi_accion::FibonacciResult_<ContainerAllocator1> & lhs, const ::mi_accion::FibonacciResult_<ContainerAllocator2> & rhs)
{
  return lhs.secuencia_final == rhs.secuencia_final;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mi_accion::FibonacciResult_<ContainerAllocator1> & lhs, const ::mi_accion::FibonacciResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mi_accion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mi_accion::FibonacciResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mi_accion::FibonacciResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mi_accion::FibonacciResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mi_accion::FibonacciResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mi_accion::FibonacciResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mi_accion::FibonacciResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mi_accion::FibonacciResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f57464dd0bc7548f31a5a26b6588625f";
  }

  static const char* value(const ::mi_accion::FibonacciResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf57464dd0bc7548fULL;
  static const uint64_t static_value2 = 0x31a5a26b6588625fULL;
};

template<class ContainerAllocator>
struct DataType< ::mi_accion::FibonacciResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mi_accion/FibonacciResult";
  }

  static const char* value(const ::mi_accion::FibonacciResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mi_accion::FibonacciResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32[] secuencia_final\n"
;
  }

  static const char* value(const ::mi_accion::FibonacciResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mi_accion::FibonacciResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.secuencia_final);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FibonacciResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mi_accion::FibonacciResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mi_accion::FibonacciResult_<ContainerAllocator>& v)
  {
    s << indent << "secuencia_final[]" << std::endl;
    for (size_t i = 0; i < v.secuencia_final.size(); ++i)
    {
      s << indent << "  secuencia_final[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.secuencia_final[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MI_ACCION_MESSAGE_FIBONACCIRESULT_H
