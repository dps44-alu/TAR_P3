// Generated by gencpp from file mi_accion/ejFibonacciGoal.msg
// DO NOT EDIT!


#ifndef MI_ACCION_MESSAGE_EJFIBONACCIGOAL_H
#define MI_ACCION_MESSAGE_EJFIBONACCIGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mi_accion
{
template <class ContainerAllocator>
struct ejFibonacciGoal_
{
  typedef ejFibonacciGoal_<ContainerAllocator> Type;

  ejFibonacciGoal_()
    : orden(0)  {
    }
  ejFibonacciGoal_(const ContainerAllocator& _alloc)
    : orden(0)  {
  (void)_alloc;
    }



   typedef int32_t _orden_type;
  _orden_type orden;





  typedef boost::shared_ptr< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ejFibonacciGoal_

typedef ::mi_accion::ejFibonacciGoal_<std::allocator<void> > ejFibonacciGoal;

typedef boost::shared_ptr< ::mi_accion::ejFibonacciGoal > ejFibonacciGoalPtr;
typedef boost::shared_ptr< ::mi_accion::ejFibonacciGoal const> ejFibonacciGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mi_accion::ejFibonacciGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mi_accion::ejFibonacciGoal_<ContainerAllocator1> & lhs, const ::mi_accion::ejFibonacciGoal_<ContainerAllocator2> & rhs)
{
  return lhs.orden == rhs.orden;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mi_accion::ejFibonacciGoal_<ContainerAllocator1> & lhs, const ::mi_accion::ejFibonacciGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mi_accion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78b08bfea030c07bbabb797372e4dd97";
  }

  static const char* value(const ::mi_accion::ejFibonacciGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78b08bfea030c07bULL;
  static const uint64_t static_value2 = 0xbabb797372e4dd97ULL;
};

template<class ContainerAllocator>
struct DataType< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mi_accion/ejFibonacciGoal";
  }

  static const char* value(const ::mi_accion::ejFibonacciGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"int32 orden\n"
"\n"
;
  }

  static const char* value(const ::mi_accion::ejFibonacciGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orden);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ejFibonacciGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mi_accion::ejFibonacciGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mi_accion::ejFibonacciGoal_<ContainerAllocator>& v)
  {
    s << indent << "orden: ";
    Printer<int32_t>::stream(s, indent + "  ", v.orden);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MI_ACCION_MESSAGE_EJFIBONACCIGOAL_H
