;; Auto-generated. Do not edit!


(when (boundp 'mi_accion::ejFibonacciFeedback)
  (if (not (find-package "MI_ACCION"))
    (make-package "MI_ACCION"))
  (shadow 'ejFibonacciFeedback (find-package "MI_ACCION")))
(unless (find-package "MI_ACCION::EJFIBONACCIFEEDBACK")
  (make-package "MI_ACCION::EJFIBONACCIFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ejFibonacciFeedback.msg.html


(defclass mi_accion::ejFibonacciFeedback
  :super ros::object
  :slots (_progreso ))

(defmethod mi_accion::ejFibonacciFeedback
  (:init
   (&key
    ((:progreso __progreso) 0.0)
    )
   (send-super :init)
   (setq _progreso (float __progreso))
   self)
  (:progreso
   (&optional __progreso)
   (if __progreso (setq _progreso __progreso)) _progreso)
  (:serialization-length
   ()
   (+
    ;; float64 _progreso
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _progreso
       (sys::poke _progreso (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _progreso
     (setq _progreso (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get mi_accion::ejFibonacciFeedback :md5sum-) "64f57b07fbcf153840824de661387d73")
(setf (get mi_accion::ejFibonacciFeedback :datatype-) "mi_accion/ejFibonacciFeedback")
(setf (get mi_accion::ejFibonacciFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
float64 progreso


")



(provide :mi_accion/ejFibonacciFeedback "64f57b07fbcf153840824de661387d73")


